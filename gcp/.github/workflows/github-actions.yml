name: Terraform CICD
on: [push]

jobs:

############### dev #################

  validate-dev:
    if: contains(github.ref, 'develop')
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup creds-key
        run: |
          rm -rf .terraform
          terraform --version
          mkdir -p ./creds
          echo $GCP_SERVICE_ACCOUNT > ./creds/serviceaccount.json
        env:
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_DEV }}

      - name: setup terraform
        uses: hashicorp/setup-terraform@v1

      - name: terraform init
        run: terraform -chdir=./environments/$ENVIRONMENT init
        env:
          ENVIRONMENT: dev
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_DEV }}
        
      - name: terraform validate
        run: terraform -chdir=./environments/$ENVIRONMENT validate
        env:
          ENVIRONMENT: dev
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_DEV }}

      - name: terraform plan
        run: terraform -chdir=./environments/$ENVIRONMENT plan -var-file=env.tfvars
        env:
          ENVIRONMENT: dev
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_DEV }}

      - name: terraform apply
        run: terraform -chdir=./environments/$ENVIRONMENT apply -auto-approve -var-file=env.tfvars
        env:
          ENVIRONMENT: dev
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_DEV }}

      - name: terraform destroy
        run: terraform -chdir=./environments/$ENVIRONMENT destroy -auto-approve -var-file=env.tfvars
        env:
          ENVIRONMENT: dev
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_DEV }}

############### test #################

  validate-test:
    if: contains(github.ref, '/^release.*$/') || contains(github.ref, '/^hotfix.*$/')
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup creds-key
        run: |
          rm -rf .terraform
          terraform --version
          mkdir -p ./creds
          echo $GCP_SERVICE_ACCOUNT > ./creds/serviceaccount.json
        env:
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_TEST }}

      - name: setup terraform
        uses: hashicorp/setup-terraform@v1

      - name: terraform init
        run: terraform -chdir=./environments/$ENVIRONMENT init
        env:
          ENVIRONMENT: test
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_TEST }}
        
      - name: terraform validate
        run: terraform -chdir=./environments/$ENVIRONMENT validate
        env:
          ENVIRONMENT: test
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_TEST }}

      - name: terraform plan
        run: terraform -chdir=./environments/$ENVIRONMENT plan -var-file=env.tfvars
        env:
          ENVIRONMENT: test
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_TEST }}

      - name: terraform apply
        run: terraform -chdir=./environments/$ENVIRONMENT apply -auto-approve -var-file=env.tfvars
        env:
          ENVIRONMENT: test
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_TEST }}

      - name: terraform destroy
        run: terraform -chdir=./environments/$ENVIRONMENT destroy -auto-approve -var-file=env.tfvars
        env:
          ENVIRONMENT: test
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_TEST }}

############### prod #################

  validate-prod:
    if: contains(github.ref, 'master')
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup creds-key
        run: |
          rm -rf .terraform
          terraform --version
          mkdir -p ./creds
          echo $GCP_SERVICE_ACCOUNT > ./creds/serviceaccount.json
        env:
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_PROD }}

      - name: setup terraform
        uses: hashicorp/setup-terraform@v1

      - name: terraform init
        run: terraform -chdir=./environments/$ENVIRONMENT init
        env:
          ENVIRONMENT: prod
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_PROD }}
        
      - name: terraform validate
        run: terraform -chdir=./environments/$ENVIRONMENT validate
        env:
          ENVIRONMENT: prod
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_PROD }}

      - name: terraform plan
        run: terraform -chdir=./environments/$ENVIRONMENT plan -var-file=env.tfvars
        env:
          ENVIRONMENT: prod
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_PROD }}

      - name: terraform apply
        run: terraform -chdir=./environments/$ENVIRONMENT apply -auto-approve -var-file=env.tfvars
        env:
          ENVIRONMENT: prod
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_PROD }}

      - name: terraform destroy
        run: terraform -chdir=./environments/$ENVIRONMENT destroy -auto-approve -var-file=env.tfvars
        env:
          ENVIRONMENT: prod
          GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_PROD }}
